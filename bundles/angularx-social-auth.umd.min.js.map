{"version":3,"file":"angularx-social-auth.umd.min.js","sources":["../../node_modules/src/util/root.ts","../../node_modules/src/util/isFunction.ts","../../node_modules/src/util/isArray.ts","../../node_modules/src/util/isObject.ts","../../node_modules/src/util/tryCatch.ts","../../node_modules/src/util/errorObject.ts","../../node_modules/src/util/UnsubscriptionError.ts","../../node_modules/src/Subscription.ts","../../node_modules/src/Observer.ts","../../node_modules/src/symbol/rxSubscriber.ts","../../node_modules/src/Subscriber.ts","../../node_modules/src/util/toSubscriber.ts","../../node_modules/src/symbol/observable.ts","../../node_modules/src/util/noop.ts","../../node_modules/src/util/pipe.ts","../../node_modules/src/Observable.ts","../../node_modules/src/util/ObjectUnsubscribedError.ts","../../node_modules/src/SubjectSubscription.ts","../../node_modules/src/Subject.ts","../../node_modules/src/AsyncSubject.ts","../../node_modules/src/observable/BoundCallbackObservable.ts","../../node_modules/src/observable/bindCallback.ts","../../node_modules/src/add/observable/bindCallback.ts","../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../node_modules/src/observable/bindNodeCallback.ts","../../node_modules/src/add/observable/bindNodeCallback.ts","../../node_modules/src/util/isScheduler.ts","../../node_modules/src/observable/ScalarObservable.ts","../../node_modules/src/observable/EmptyObservable.ts","../../node_modules/src/observable/ArrayObservable.ts","../../node_modules/src/OuterSubscriber.ts","../../node_modules/src/util/isArrayLike.ts","../../node_modules/src/util/isPromise.ts","../../node_modules/src/symbol/iterator.ts","../../node_modules/src/InnerSubscriber.ts","../../node_modules/src/util/subscribeToResult.ts","../../node_modules/src/operators/combineLatest.ts","../../node_modules/src/observable/combineLatest.ts","../../node_modules/src/add/observable/combineLatest.ts","../../node_modules/src/observable/of.ts","../../node_modules/src/observable/PromiseObservable.ts","../../node_modules/src/observable/IteratorObservable.ts","../../node_modules/src/observable/ArrayLikeObservable.ts","../../node_modules/src/Notification.ts","../../node_modules/src/operators/observeOn.ts","../../node_modules/src/observable/FromObservable.ts","../../node_modules/src/observable/from.ts","../../node_modules/src/operators/mergeMap.ts","../../node_modules/src/util/identity.ts","../../node_modules/src/operators/mergeAll.ts","../../node_modules/src/operators/concatAll.ts","../../node_modules/src/observable/concat.ts","../../node_modules/src/add/observable/concat.ts","../../node_modules/src/observable/DeferObservable.ts","../../node_modules/src/observable/defer.ts","../../node_modules/src/add/observable/defer.ts","../../node_modules/src/observable/empty.ts","../../node_modules/src/add/observable/empty.ts","../../node_modules/src/observable/ForkJoinObservable.ts","../../node_modules/src/observable/forkJoin.ts","../../node_modules/src/add/observable/forkJoin.ts","../../node_modules/src/add/observable/from.ts","../../node_modules/src/observable/FromEventObservable.ts","../../node_modules/src/observable/fromEvent.ts","../../node_modules/src/add/observable/fromEvent.ts","../../node_modules/src/observable/FromEventPatternObservable.ts","../../node_modules/src/observable/fromEventPattern.ts","../../node_modules/src/add/observable/fromEventPattern.ts","../../node_modules/src/observable/fromPromise.ts","../../node_modules/src/add/observable/fromPromise.ts","../../node_modules/src/observable/GenerateObservable.ts","../../node_modules/src/observable/generate.ts","../../node_modules/src/add/observable/generate.ts","../../node_modules/src/observable/IfObservable.ts","../../node_modules/src/observable/if.ts","../../node_modules/src/add/observable/if.ts","../../node_modules/src/util/isNumeric.ts","../../node_modules/src/scheduler/Action.ts","../../node_modules/src/scheduler/AsyncAction.ts","../../node_modules/src/Scheduler.ts","../../node_modules/src/scheduler/AsyncScheduler.ts","../../node_modules/src/scheduler/async.ts","../../node_modules/src/observable/IntervalObservable.ts","../../node_modules/src/observable/interval.ts","../../node_modules/src/add/observable/interval.ts","../../node_modules/src/observable/merge.ts","../../node_modules/src/add/observable/merge.ts","../../node_modules/src/observable/race.ts","../../node_modules/src/add/observable/race.ts","../../node_modules/src/observable/NeverObservable.ts","../../node_modules/src/observable/never.ts","../../node_modules/src/add/observable/never.ts","../../node_modules/src/add/observable/of.ts","../../node_modules/src/operators/onErrorResumeNext.ts","../../node_modules/src/observable/onErrorResumeNext.ts","../../node_modules/src/add/observable/onErrorResumeNext.ts","../../node_modules/src/observable/PairsObservable.ts","../../node_modules/src/observable/pairs.ts","../../node_modules/src/add/observable/pairs.ts","../../node_modules/src/observable/RangeObservable.ts","../../node_modules/src/observable/range.ts","../../node_modules/src/add/observable/range.ts","../../node_modules/src/observable/UsingObservable.ts","../../node_modules/src/observable/using.ts","../../node_modules/src/add/observable/using.ts","../../node_modules/src/observable/ErrorObservable.ts","../../node_modules/src/observable/throw.ts","../../node_modules/src/add/observable/throw.ts","../../node_modules/src/util/isDate.ts","../../node_modules/src/observable/TimerObservable.ts","../../node_modules/src/observable/timer.ts","../../node_modules/src/add/observable/timer.ts","../../node_modules/src/operators/zip.ts","../../node_modules/src/observable/zip.ts","../../node_modules/src/add/observable/zip.ts","../../node_modules/src/operators/map.ts","../../node_modules/src/observable/dom/AjaxObservable.ts","../../node_modules/src/observable/dom/ajax.ts","../../node_modules/src/add/observable/dom/ajax.ts","../../node_modules/src/scheduler/QueueAction.ts","../../node_modules/src/scheduler/queue.ts","../../node_modules/src/scheduler/QueueScheduler.ts","../../node_modules/src/ReplaySubject.ts","../../node_modules/src/util/assign.ts","../../node_modules/src/observable/dom/WebSocketSubject.ts","../../node_modules/src/observable/dom/webSocket.ts","../../node_modules/src/add/observable/dom/webSocket.ts","../../node_modules/src/operators/buffer.ts","../../node_modules/src/operator/buffer.ts","../../node_modules/src/add/operator/buffer.ts","../../node_modules/src/operators/bufferCount.ts","../../node_modules/src/operator/bufferCount.ts","../../node_modules/src/add/operator/bufferCount.ts","../../node_modules/src/operators/bufferTime.ts","../../node_modules/src/operator/bufferTime.ts","../../node_modules/src/add/operator/bufferTime.ts","../../node_modules/src/operators/bufferToggle.ts","../../node_modules/src/operator/bufferToggle.ts","../../node_modules/src/add/operator/bufferToggle.ts","../../node_modules/src/operators/bufferWhen.ts","../../node_modules/src/operator/bufferWhen.ts","../../node_modules/src/add/operator/bufferWhen.ts","../../node_modules/src/operators/catchError.ts","../../node_modules/src/operator/catch.ts","../../node_modules/src/add/operator/catch.ts","../../node_modules/src/operators/combineAll.ts","../../node_modules/src/operator/combineAll.ts","../../node_modules/src/add/operator/combineAll.ts","../../node_modules/src/operator/combineLatest.ts","../../node_modules/src/add/operator/combineLatest.ts","../../node_modules/src/operators/concat.ts","../../node_modules/src/operator/concat.ts","../../node_modules/src/add/operator/concat.ts","../../node_modules/src/operator/concatAll.ts","../../node_modules/src/add/operator/concatAll.ts","../../node_modules/src/operators/concatMap.ts","../../node_modules/src/operator/concatMap.ts","../../node_modules/src/add/operator/concatMap.ts","../../node_modules/src/operators/concatMapTo.ts","../../node_modules/src/operator/concatMapTo.ts","../../node_modules/src/add/operator/concatMapTo.ts","../../node_modules/src/operators/count.ts","../../node_modules/src/operator/count.ts","../../node_modules/src/add/operator/count.ts","../../node_modules/src/operators/dematerialize.ts","../../node_modules/src/operator/dematerialize.ts","../../node_modules/src/add/operator/dematerialize.ts","../../node_modules/src/operators/debounce.ts","../../node_modules/src/operator/debounce.ts","../../node_modules/src/add/operator/debounce.ts","../../node_modules/src/operators/debounceTime.ts","../../node_modules/src/operator/debounceTime.ts","../../node_modules/src/add/operator/debounceTime.ts","../../node_modules/src/operators/defaultIfEmpty.ts","../../node_modules/src/operator/defaultIfEmpty.ts","../../node_modules/src/add/operator/defaultIfEmpty.ts","../../node_modules/src/operators/delay.ts","../../node_modules/src/operator/delay.ts","../../node_modules/src/add/operator/delay.ts","../../node_modules/src/operators/delayWhen.ts","../../node_modules/src/operator/delayWhen.ts","../../node_modules/src/util/Set.ts","../../node_modules/src/add/operator/delayWhen.ts","../../node_modules/src/operators/distinct.ts","../../node_modules/src/operator/distinct.ts","../../node_modules/src/add/operator/distinct.ts","../../node_modules/src/operators/distinctUntilChanged.ts","../../node_modules/src/operator/distinctUntilChanged.ts","../../node_modules/src/add/operator/distinctUntilChanged.ts","../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../node_modules/src/operator/distinctUntilKeyChanged.ts","../../node_modules/src/add/operator/distinctUntilKeyChanged.ts","../../node_modules/src/operators/tap.ts","../../node_modules/src/operator/do.ts","../../node_modules/src/add/operator/do.ts","../../node_modules/src/operators/exhaust.ts","../../node_modules/src/operator/exhaust.ts","../../node_modules/src/add/operator/exhaust.ts","../../node_modules/src/operators/exhaustMap.ts","../../node_modules/src/operator/exhaustMap.ts","../../node_modules/src/add/operator/exhaustMap.ts","../../node_modules/src/operators/expand.ts","../../node_modules/src/operator/expand.ts","../../node_modules/src/add/operator/expand.ts","../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../node_modules/src/operators/elementAt.ts","../../node_modules/src/operator/elementAt.ts","../../node_modules/src/add/operator/elementAt.ts","../../node_modules/src/operators/filter.ts","../../node_modules/src/operator/filter.ts","../../node_modules/src/add/operator/filter.ts","../../node_modules/src/operators/finalize.ts","../../node_modules/src/operator/finally.ts","../../node_modules/src/add/operator/finally.ts","../../node_modules/src/operators/find.ts","../../node_modules/src/operator/find.ts","../../node_modules/src/add/operator/find.ts","../../node_modules/src/operators/findIndex.ts","../../node_modules/src/operator/findIndex.ts","../../node_modules/src/add/operator/findIndex.ts","../../node_modules/src/util/EmptyError.ts","../../node_modules/src/operators/first.ts","../../node_modules/src/operator/first.ts","../../node_modules/src/add/operator/first.ts","../../node_modules/src/util/MapPolyfill.ts","../../node_modules/src/util/Map.ts","../../node_modules/src/util/FastMap.ts","../../node_modules/src/operators/groupBy.ts","../../node_modules/src/operator/groupBy.ts","../../node_modules/src/add/operator/groupBy.ts","../../node_modules/src/operators/ignoreElements.ts","../../node_modules/src/operator/ignoreElements.ts","../../node_modules/src/add/operator/ignoreElements.ts","../../node_modules/src/operators/isEmpty.ts","../../node_modules/src/operator/isEmpty.ts","../../node_modules/src/add/operator/isEmpty.ts","../../node_modules/src/operators/audit.ts","../../node_modules/src/operator/audit.ts","../../node_modules/src/add/operator/audit.ts","../../node_modules/src/operators/auditTime.ts","../../node_modules/src/operator/auditTime.ts","../../node_modules/src/add/operator/auditTime.ts","../../node_modules/src/operators/last.ts","../../node_modules/src/operator/last.ts","../../node_modules/src/add/operator/last.ts","../../node_modules/src/operator/let.ts","../../node_modules/src/add/operator/let.ts","../../node_modules/src/operators/every.ts","../../node_modules/src/operator/every.ts","../../node_modules/src/add/operator/every.ts","../../node_modules/src/operator/map.ts","../../node_modules/src/add/operator/map.ts","../../node_modules/src/operators/mapTo.ts","../../node_modules/src/operator/mapTo.ts","../../node_modules/src/add/operator/mapTo.ts","../../node_modules/src/operators/materialize.ts","../../node_modules/src/operator/materialize.ts","../../node_modules/src/add/operator/materialize.ts","../../node_modules/src/operators/scan.ts","../../node_modules/src/operators/takeLast.ts","../../node_modules/src/operators/reduce.ts","../../node_modules/src/operators/max.ts","../../node_modules/src/operator/max.ts","../../node_modules/src/add/operator/max.ts","../../node_modules/src/operators/merge.ts","../../node_modules/src/operator/merge.ts","../../node_modules/src/add/operator/merge.ts","../../node_modules/src/operator/mergeAll.ts","../../node_modules/src/add/operator/mergeAll.ts","../../node_modules/src/operator/mergeMap.ts","../../node_modules/src/add/operator/mergeMap.ts","../../node_modules/src/operators/mergeMapTo.ts","../../node_modules/src/operator/mergeMapTo.ts","../../node_modules/src/add/operator/mergeMapTo.ts","../../node_modules/src/operators/mergeScan.ts","../../node_modules/src/operator/mergeScan.ts","../../node_modules/src/add/operator/mergeScan.ts","../../node_modules/src/operators/min.ts","../../node_modules/src/operator/min.ts","../../node_modules/src/add/operator/min.ts","../../node_modules/src/operators/refCount.ts","../../node_modules/src/observable/ConnectableObservable.ts","../../node_modules/src/operators/multicast.ts","../../node_modules/src/operator/multicast.ts","../../node_modules/src/add/operator/multicast.ts","../../node_modules/src/operator/observeOn.ts","../../node_modules/src/add/operator/observeOn.ts","../../node_modules/src/operator/onErrorResumeNext.ts","../../node_modules/src/add/operator/onErrorResumeNext.ts","../../node_modules/src/operators/pairwise.ts","../../node_modules/src/operator/pairwise.ts","../../node_modules/src/add/operator/pairwise.ts","../../node_modules/src/util/not.ts","../../node_modules/src/operators/partition.ts","../../node_modules/src/operator/partition.ts","../../node_modules/src/add/operator/partition.ts","../../node_modules/src/operators/pluck.ts","../../node_modules/src/operator/pluck.ts","../../node_modules/src/add/operator/pluck.ts","../../node_modules/src/operators/publish.ts","../../node_modules/src/operator/publish.ts","../../node_modules/src/add/operator/publish.ts","../../node_modules/src/BehaviorSubject.ts","../../node_modules/src/operators/publishBehavior.ts","../../node_modules/src/operator/publishBehavior.ts","../../node_modules/src/add/operator/publishBehavior.ts","../../node_modules/src/operators/publishReplay.ts","../../node_modules/src/operator/publishReplay.ts","../../node_modules/src/add/operator/publishReplay.ts","../../node_modules/src/operators/publishLast.ts","../../node_modules/src/operator/publishLast.ts","../../node_modules/src/add/operator/publishLast.ts","../../node_modules/src/operators/race.ts","../../node_modules/src/operator/race.ts","../../node_modules/src/add/operator/race.ts","../../node_modules/src/operator/reduce.ts","../../node_modules/src/add/operator/reduce.ts","../../node_modules/src/operators/repeat.ts","../../node_modules/src/operator/repeat.ts","../../node_modules/src/add/operator/repeat.ts","../../node_modules/src/operators/repeatWhen.ts","../../node_modules/src/operator/repeatWhen.ts","../../node_modules/src/add/operator/repeatWhen.ts","../../node_modules/src/operators/retry.ts","../../node_modules/src/operator/retry.ts","../../node_modules/src/add/operator/retry.ts","../../node_modules/src/operators/retryWhen.ts","../../node_modules/src/operator/retryWhen.ts","../../node_modules/src/add/operator/retryWhen.ts","../../node_modules/src/operators/sample.ts","../../node_modules/src/operator/sample.ts","../../node_modules/src/add/operator/sample.ts","../../node_modules/src/operators/sampleTime.ts","../../node_modules/src/operator/sampleTime.ts","../../node_modules/src/add/operator/sampleTime.ts","../../node_modules/src/operator/scan.ts","../../node_modules/src/add/operator/scan.ts","../../node_modules/src/operators/sequenceEqual.ts","../../node_modules/src/operator/sequenceEqual.ts","../../node_modules/src/operators/share.ts","../../node_modules/src/add/operator/sequenceEqual.ts","../../node_modules/src/operator/share.ts","../../node_modules/src/add/operator/share.ts","../../node_modules/src/operators/shareReplay.ts","../../node_modules/src/operator/shareReplay.ts","../../node_modules/src/add/operator/shareReplay.ts","../../node_modules/src/operators/single.ts","../../node_modules/src/operator/single.ts","../../node_modules/src/add/operator/single.ts","../../node_modules/src/operators/skip.ts","../../node_modules/src/operator/skip.ts","../../node_modules/src/add/operator/skip.ts","../../node_modules/src/operators/skipLast.ts","../../node_modules/src/operator/skipLast.ts","../../node_modules/src/add/operator/skipLast.ts","../../node_modules/src/operators/skipUntil.ts","../../node_modules/src/operator/skipUntil.ts","../../node_modules/src/add/operator/skipUntil.ts","../../node_modules/src/operators/skipWhile.ts","../../node_modules/src/operator/skipWhile.ts","../../node_modules/src/add/operator/skipWhile.ts","../../node_modules/src/operators/startWith.ts","../../node_modules/src/operator/startWith.ts","../../node_modules/src/add/operator/startWith.ts","../../node_modules/src/util/Immediate.ts","../../node_modules/src/scheduler/AsapAction.ts","../../node_modules/src/scheduler/asap.ts","../../node_modules/src/scheduler/AsapScheduler.ts","../../node_modules/src/observable/SubscribeOnObservable.ts","../../node_modules/src/operators/subscribeOn.ts","../../node_modules/src/operator/subscribeOn.ts","../../node_modules/src/add/operator/subscribeOn.ts","../../node_modules/src/operators/switchMap.ts","../../node_modules/src/operators/switchAll.ts","../../node_modules/src/operator/switch.ts","../../node_modules/src/add/operator/switch.ts","../../node_modules/src/operator/switchMap.ts","../../node_modules/src/add/operator/switchMap.ts","../../node_modules/src/operators/switchMapTo.ts","../../node_modules/src/operator/switchMapTo.ts","../../node_modules/src/add/operator/switchMapTo.ts","../../node_modules/src/operators/take.ts","../../node_modules/src/operator/take.ts","../../node_modules/src/add/operator/take.ts","../../node_modules/src/operator/takeLast.ts","../../node_modules/src/add/operator/takeLast.ts","../../node_modules/src/operators/takeUntil.ts","../../node_modules/src/operator/takeUntil.ts","../../node_modules/src/add/operator/takeUntil.ts","../../node_modules/src/operators/takeWhile.ts","../../node_modules/src/operator/takeWhile.ts","../../node_modules/src/add/operator/takeWhile.ts","../../node_modules/src/operators/throttle.ts","../../node_modules/src/operator/throttle.ts","../../node_modules/src/add/operator/throttle.ts","../../node_modules/src/operators/throttleTime.ts","../../node_modules/src/operator/throttleTime.ts","../../node_modules/src/add/operator/throttleTime.ts","../../node_modules/src/operators/timeInterval.ts","../../node_modules/src/operator/timeInterval.ts","../../node_modules/src/add/operator/timeInterval.ts","../../node_modules/src/util/TimeoutError.ts","../../node_modules/src/operators/timeout.ts","../../node_modules/src/operator/timeout.ts","../../node_modules/src/add/operator/timeout.ts","../../node_modules/src/operators/timeoutWith.ts","../../node_modules/src/operator/timeoutWith.ts","../../node_modules/src/add/operator/timeoutWith.ts","../../node_modules/src/operators/timestamp.ts","../../node_modules/src/operator/timestamp.ts","../../node_modules/src/operators/toArray.ts","../../node_modules/src/add/operator/timestamp.ts","../../node_modules/src/operator/toArray.ts","../../node_modules/src/add/operator/toArray.ts","../../node_modules/src/operators/window.ts","../../node_modules/src/operator/window.ts","../../node_modules/src/add/operator/window.ts","../../node_modules/src/operators/windowCount.ts","../../node_modules/src/operator/windowCount.ts","../../node_modules/src/add/operator/windowCount.ts","../../node_modules/src/operators/windowTime.ts","../../node_modules/src/operator/windowTime.ts","../../node_modules/src/add/operator/windowTime.ts","../../node_modules/src/operators/windowToggle.ts","../../node_modules/src/operator/windowToggle.ts","../../node_modules/src/add/operator/windowToggle.ts","../../node_modules/src/operators/windowWhen.ts","../../node_modules/src/operator/windowWhen.ts","../../node_modules/src/add/operator/windowWhen.ts","../../node_modules/src/operators/withLatestFrom.ts","../../node_modules/src/operator/withLatestFrom.ts","../../node_modules/src/add/operator/withLatestFrom.ts","../../node_modules/src/operator/zip.ts","../../node_modules/src/add/operator/zip.ts","../../node_modules/src/operators/zipAll.ts","../../node_modules/src/operator/zipAll.ts","../../node_modules/src/add/operator/zipAll.ts","../../node_modules/src/testing/SubscriptionLog.ts","../../node_modules/src/testing/SubscriptionLoggable.ts","../../node_modules/src/util/applyMixins.ts","../../node_modules/src/testing/ColdObservable.ts","../../node_modules/src/testing/HotObservable.ts","../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../node_modules/src/testing/TestScheduler.ts","../../node_modules/src/util/AnimationFrame.ts","../../node_modules/src/scheduler/AnimationFrameAction.ts","../../node_modules/src/scheduler/animationFrame.ts","../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../out-tsc/lib/src/auth.service.ts","../../packages/common/src/location/platform_location.ts","../../packages/common/src/location/location_strategy.ts","../../packages/common/src/location/location.ts","../../packages/common/src/location/hash_location_strategy.ts","../../packages/common/src/location/path_location_strategy.ts","../../packages/common/src/location/index.ts","../../packages/common/src/localization.ts","../../packages/common/src/directives/ng_class.ts","../../packages/common/src/directives/ng_component_outlet.ts","../../packages/common/src/directives/ng_for_of.ts","../../packages/common/src/directives/ng_if.ts","../../packages/common/src/directives/ng_switch.ts","../../packages/common/src/directives/ng_plural.ts","../../packages/common/src/directives/ng_style.ts","../../packages/common/src/directives/ng_template_outlet.ts","../../packages/common/src/directives/index.ts","../../packages/common/src/pipes/async_pipe.ts","../../packages/common/src/pipes/case_conversion_pipes.ts","../../packages/common/src/pipes/intl.ts","../../packages/common/src/pipes/number_pipe.ts","../../packages/common/src/pipes/date_pipe.ts","../../packages/common/src/pipes/i18n_plural_pipe.ts","../../packages/common/src/pipes/i18n_select_pipe.ts","../../packages/common/src/pipes/json_pipe.ts","../../packages/common/src/pipes/slice_pipe.ts","../../packages/common/src/pipes/index.ts","../../packages/common/src/common_module.ts","../../out-tsc/lib/src/sociallogin.module.ts","../../out-tsc/lib/src/entities/user.ts","../../out-tsc/lib/src/entities/base-login-provider.ts","../../out-tsc/lib/src/providers/google-login-provider.ts","../../out-tsc/lib/src/providers/facebook-login-provider.ts"],"sourcesContent":["declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          return JSON.parse(xhr.responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n        return  ('response' in xhr) ? xhr.response : xhr.responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { LoginProvider } from './entities/login-provider';\nimport { SocialUser } from './entities/user';\n\nexport interface AuthServiceConfigItem {\n  id: string;\n  provider: LoginProvider;\n}\nexport class AuthServiceConfig {\n  providers: Map<string, LoginProvider> = new Map<string, LoginProvider>();\n/**\n * @param {?} providers\n */\nconstructor(providers: AuthServiceConfigItem[]) {\n    for (let i = 0; i < providers.length; i++) {\n      let element = providers[i];\n      this.providers.set(element.id, element.provider);\n    }\n  }\n}\n\nfunction AuthServiceConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthServiceConfig.prototype.providers;\n}\n\nexport class AuthService {\nprivate static readonly ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nprivate static readonly ERR_NOT_LOGGED_IN = 'Not logged in';\nprivate providers: Map<string, LoginProvider>;\nprivate _user: SocialUser = null;\nprivate _authState: BehaviorSubject<SocialUser> = new BehaviorSubject(null);\n/**\n * @return {?}\n */\nget authState(): Observable<SocialUser> {\n    return this._authState.asObservable();\n  }\n/**\n * @param {?} config\n */\nconstructor(config: AuthServiceConfig) {\n    this.providers = config.providers;\n\n    this.providers.forEach((provider: LoginProvider, key: string) => {\n      provider.initialize().then((user: SocialUser) => {\n        user.provider = key;\n\n        this._user = user;\n        this._authState.next(user);\n      }).catch((err) => {\n        // this._authState.next(null);\n      });\n    });\n  }\n/**\n * @param {?} providerId\n * @return {?}\n */\nsignIn(providerId: string): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      let /** @type {?} */ providerObject = this.providers.get(providerId);\n      if (providerObject) {\n        providerObject.signIn().then((user: SocialUser) => {\n          user.provider = providerId;\n          resolve(user);\n\n          this._user = user;\n          this._authState.next(user);\n        });\n      } else {\n        reject(AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nsignOut(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!this._user) {\n        reject(AuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let /** @type {?} */ providerId = this._user.provider;\n        let /** @type {?} */ providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signOut().then(() => {\n            resolve();\n\n            this._user = null;\n            this._authState.next(null);\n          });\n        } else {\n          reject(AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthServiceConfig, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n/** @type {?} */\nAuthService.ERR_NOT_LOGGED_IN;\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.providers;\n/** @type {?} */\nAuthService.prototype._user;\n/** @type {?} */\nAuthService.prototype._authState;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHrefFromDOM() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\npathname() {}\n/**\n * @abstract\n * @return {?}\n */\nsearch() {}\n/**\n * @abstract\n * @return {?}\n */\nhash() {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n}\n/**\n * \\@whatItDoes indicates when a location is initialized\n * \\@experimental\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {LocationChangeListener} from './platform_location';\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n * \n * This is used under the hood of the {\\@link Location} service.\n * \n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n * \n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n * \n * See these two classes for more.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class LocationStrategy {\n/**\n * @abstract\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash?: boolean) {}\n/**\n * @abstract\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHref() {}\n}\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {\\@link PathLocationStrategy}.\n * \n * If you're using {\\@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n * \n * ### Example\n * \n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n * \n * \\@NgModule({ \n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n */\nexport const APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, Injectable} from '@angular/core';\n\nimport {LocationStrategy} from './location_strategy';\n\n/** @experimental */\nexport interface PopStateEvent {\n  pop?: boolean;\n  type?: string;\n  url?: string;\n}\n/**\n * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\n * \\@description \n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n * \n * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n * \n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n * \n * ### Example\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \\@stable\n */\nexport class Location {\n/**\n * \\@internal\n */\n_subject: EventEmitter<any> = new EventEmitter();\n/**\n * \\@internal\n */\n_baseHref: string;\n/**\n * \\@internal\n */\n_platformStrategy: LocationStrategy;\n/**\n * @param {?} platformStrategy\n */\nconstructor(platformStrategy: LocationStrategy) {\n    this._platformStrategy = platformStrategy;\n    const browserBaseHref = this._platformStrategy.getBaseHref();\n    this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'type': ev.type,\n      });\n    });\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n/**\n * Normalizes the given path and compares to the current normalized path.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nisCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n  }\n/**\n * Given a string representing a URL, returns the normalized URL path without leading or\n * trailing slashes.\n * @param {?} url\n * @return {?}\n */\nnormalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n/**\n * Given a string representing a URL, returns the platform-specific external URL path.\n * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n * @param {?} url\n * @return {?}\n */\nprepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and pushes a\n * new item onto the platform's history.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\ngo(path: string, query: string = ''): void {\n    this._platformStrategy.pushState(null, '', path, query);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and replaces\n * the top item on the platform's history stack.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nreplaceState(path: string, query: string = ''): void {\n    this._platformStrategy.replaceState(null, '', path, query);\n  }\n/**\n * Navigates forward in the platform's history.\n * @return {?}\n */\nforward(): void { this._platformStrategy.forward(); }\n/**\n * Navigates back in the platform's history.\n * @return {?}\n */\nback(): void { this._platformStrategy.back(); }\n/**\n * Subscribe to the platform's `popState` events.\n * @param {?} onNext\n * @param {?=} onThrow\n * @param {?=} onReturn\n * @return {?}\n */\nsubscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n/**\n * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n * is.\n * @param {?} params\n * @return {?}\n */\npublic static normalizeQueryParams(params: string): string {\n    return params && params[0] !== '?' ? '?' + params : params;\n  }\n/**\n * Given 2 parts of a url, join them with a slash if needed.\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\npublic static joinWithSlash(start: string, end: string): string {\n    if (start.length == 0) {\n      return end;\n    }\n    if (end.length == 0) {\n      return start;\n    }\n    let /** @type {?} */ slashes = 0;\n    if (start.endsWith('/')) {\n      slashes++;\n    }\n    if (end.startsWith('/')) {\n      slashes++;\n    }\n    if (slashes == 2) {\n      return start + end.substring(1);\n    }\n    if (slashes == 1) {\n      return start + end;\n    }\n    return start + '/' + end;\n  }\n/**\n * If url has a trailing slash, remove it, otherwise return url as is.\n * @param {?} url\n * @return {?}\n */\npublic static stripTrailingSlash(url: string): string { return url.replace(/\\/$/, ''); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocationStrategy, },\n];\n}\n\nfunction Location_tsickle_Closure_declarations() {\n/** @type {?} */\nLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocation.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._subject;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._baseHref;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._platformStrategy;\n}\n\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL hash for storing application location data.\n * \\@description \n * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n * \n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class HashLocationStrategy extends LocationStrategy {\nprivate _baseHref: string = '';\n/**\n * @param {?} _platformLocation\n * @param {?=} _baseHref\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let /** @type {?} */ path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    const /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url: string|null =\n        this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction HashLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nHashLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHashLocationStrategy.ctorParameters;\n/** @type {?} */\nHashLocationStrategy.prototype._baseHref;\n/** @type {?} */\nHashLocationStrategy.prototype._platformLocation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL for storing application location data.\n * \\@description \n * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n * \n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n * \n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class PathLocationStrategy extends LocationStrategy {\nprivate _baseHref: string;\n/**\n * @param {?} _platformLocation\n * @param {?=} href\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    return Location.joinWithSlash(this._baseHref, internal);\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    const /** @type {?} */ pathname = this._platformLocation.pathname +\n        Location.normalizeQueryParams(this._platformLocation.search);\n    const /** @type {?} */ hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction PathLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nPathLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPathLocationStrategy.ctorParameters;\n/** @type {?} */\nPathLocationStrategy.prototype._baseHref;\n/** @type {?} */\nPathLocationStrategy.prototype._platformLocation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {PlatformLocation,LOCATION_INITIALIZED,LocationChangeEvent,LocationChangeListener} from './platform_location';\nexport {LocationStrategy,APP_BASE_HREF} from './location_strategy';\nexport {HashLocationStrategy} from './hash_location_strategy';\nexport {PathLocationStrategy} from './path_location_strategy';\nexport {PopStateEvent,Location} from './location';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgLocalization {\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ngetPluralCategory(value: any) {} }\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * \n * \\@internal\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @return {?}\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization): string {\n  let /** @type {?} */ key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n */\nexport class NgLocaleLocalization extends NgLocalization {\n/**\n * @param {?} locale\n */\nconstructor( protected locale: string) { super(); }\n/**\n * @param {?} value\n * @return {?}\n */\ngetPluralCategory(value: any): string {\n    const /** @type {?} */ plural = getPluralCase(this.locale, value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NgLocaleLocalization_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLocaleLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLocaleLocalization.ctorParameters;\n/** @type {?} */\nNgLocaleLocalization.prototype.locale;\n}\n\nexport type Plural = number;\nexport let Plural: any = {};\nPlural.Zero = 0;\nPlural.One = 1;\nPlural.Two = 2;\nPlural.Few = 3;\nPlural.Many = 4;\nPlural.Other = 5;\nPlural[Plural.Zero] = \"Zero\";\nPlural[Plural.One] = \"One\";\nPlural[Plural.Two] = \"Two\";\nPlural[Plural.Few] = \"Few\";\nPlural[Plural.Many] = \"Many\";\nPlural[Plural.Other] = \"Other\";\n\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nexport function getPluralCase(locale: string, nLike: number | string): Plural {\n  // TODO(vicb): lazy compute\n  if (typeof nLike === 'string') {\n    nLike = parseInt( /** @type {?} */((<string>nLike)), 10);\n  }\n  const /** @type {?} */ n: number = /** @type {?} */(( nLike as number));\n  const /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n  const /** @type {?} */ i = Math.floor(Math.abs(n));\n  const /** @type {?} */ v = nDecimal.length;\n  const /** @type {?} */ f = parseInt(nDecimal, 10);\n  const /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n\n  const /** @type {?} */ lang = locale.split('-')[0].toLowerCase();\n\n  switch (lang) {\n    case 'af':\n    case 'asa':\n    case 'az':\n    case 'bem':\n    case 'bez':\n    case 'bg':\n    case 'brx':\n    case 'ce':\n    case 'cgg':\n    case 'chr':\n    case 'ckb':\n    case 'ee':\n    case 'el':\n    case 'eo':\n    case 'es':\n    case 'eu':\n    case 'fo':\n    case 'fur':\n    case 'gsw':\n    case 'ha':\n    case 'haw':\n    case 'hu':\n    case 'jgo':\n    case 'jmc':\n    case 'ka':\n    case 'kk':\n    case 'kkj':\n    case 'kl':\n    case 'ks':\n    case 'ksb':\n    case 'ky':\n    case 'lb':\n    case 'lg':\n    case 'mas':\n    case 'mgo':\n    case 'ml':\n    case 'mn':\n    case 'nb':\n    case 'nd':\n    case 'ne':\n    case 'nn':\n    case 'nnh':\n    case 'nyn':\n    case 'om':\n    case 'or':\n    case 'os':\n    case 'ps':\n    case 'rm':\n    case 'rof':\n    case 'rwk':\n    case 'saq':\n    case 'seh':\n    case 'sn':\n    case 'so':\n    case 'sq':\n    case 'ta':\n    case 'te':\n    case 'teo':\n    case 'tk':\n    case 'tr':\n    case 'ug':\n    case 'uz':\n    case 'vo':\n    case 'vun':\n    case 'wae':\n    case 'xog':\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'agq':\n    case 'bas':\n    case 'cu':\n    case 'dav':\n    case 'dje':\n    case 'dua':\n    case 'dyo':\n    case 'ebu':\n    case 'ewo':\n    case 'guz':\n    case 'kam':\n    case 'khq':\n    case 'ki':\n    case 'kln':\n    case 'kok':\n    case 'ksf':\n    case 'lrc':\n    case 'lu':\n    case 'luo':\n    case 'luy':\n    case 'mer':\n    case 'mfe':\n    case 'mgh':\n    case 'mua':\n    case 'mzn':\n    case 'nmg':\n    case 'nus':\n    case 'qu':\n    case 'rn':\n    case 'rw':\n    case 'sbp':\n    case 'twq':\n    case 'vai':\n    case 'yav':\n    case 'yue':\n    case 'zgh':\n    case 'ak':\n    case 'ln':\n    case 'mg':\n    case 'pa':\n    case 'ti':\n      if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n      return Plural.Other;\n    case 'am':\n    case 'as':\n    case 'bn':\n    case 'fa':\n    case 'gu':\n    case 'hi':\n    case 'kn':\n    case 'mr':\n    case 'zu':\n      if (i === 0 || n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ar':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n      return Plural.Other;\n    case 'ast':\n    case 'ca':\n    case 'de':\n    case 'en':\n    case 'et':\n    case 'fi':\n    case 'fy':\n    case 'gl':\n    case 'it':\n    case 'nl':\n    case 'sv':\n    case 'sw':\n    case 'ur':\n    case 'yi':\n      if (i === 1 && v === 0) return Plural.One;\n      return Plural.Other;\n    case 'be':\n      if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n          !(n % 100 >= 12 && n % 100 <= 14))\n        return Plural.Few;\n      if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n          n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'br':\n      if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n      if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n      if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n          !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n            n % 100 >= 90 && n % 100 <= 99))\n        return Plural.Few;\n      if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'bs':\n    case 'hr':\n    case 'sr':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n        return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n              !(i % 100 >= 12 && i % 100 <= 14) ||\n          f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n              !(f % 100 >= 12 && f % 100 <= 14))\n        return Plural.Few;\n      return Plural.Other;\n    case 'cs':\n    case 'sk':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'cy':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === 3) return Plural.Few;\n      if (n === 6) return Plural.Many;\n      return Plural.Other;\n    case 'da':\n      if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n      return Plural.Other;\n    case 'dsb':\n    case 'hsb':\n      if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n          f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ff':\n    case 'fr':\n    case 'hy':\n    case 'kab':\n      if (i === 0 || i === 1) return Plural.One;\n      return Plural.Other;\n    case 'fil':\n      if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n          v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n          !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n        return Plural.One;\n      return Plural.Other;\n    case 'ga':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n      if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n      return Plural.Other;\n    case 'gd':\n      if (n === 1 || n === 11) return Plural.One;\n      if (n === 2 || n === 12) return Plural.Two;\n      if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n      return Plural.Other;\n    case 'gv':\n      if (v === 0 && i % 10 === 1) return Plural.One;\n      if (v === 0 && i % 10 === 2) return Plural.Two;\n      if (v === 0 &&\n          (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n        return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'he':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === 2 && v === 0) return Plural.Two;\n      if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'is':\n      if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n      return Plural.Other;\n    case 'ksh':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'kw':\n    case 'naq':\n    case 'se':\n    case 'smn':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      return Plural.Other;\n    case 'lag':\n      if (n === 0) return Plural.Zero;\n      if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n      return Plural.Other;\n    case 'lt':\n      if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n          !(n % 100 >= 11 && n % 100 <= 19))\n        return Plural.Few;\n      if (!(f === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'lv':\n    case 'prg':\n      if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n          v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n        return Plural.Zero;\n      if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n          !(v === 2) && f % 10 === 1)\n        return Plural.One;\n      return Plural.Other;\n    case 'mk':\n      if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mt':\n      if (n === 1) return Plural.One;\n      if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n        return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n      return Plural.Other;\n    case 'pl':\n      if (i === 1 && v === 0) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'pt':\n      if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n      return Plural.Other;\n    case 'ro':\n      if (i === 1 && v === 0) return Plural.One;\n      if (!(v === 0) || n === 0 ||\n          !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ru':\n    case 'uk':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && i % 10 === 0 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'shi':\n      if (i === 0 || n === 1) return Plural.One;\n      if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n      return Plural.Other;\n    case 'si':\n      if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n      return Plural.Other;\n    case 'sl':\n      if (v === 0 && i % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n        return Plural.Few;\n      return Plural.Other;\n    case 'tzm':\n      if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n        return Plural.One;\n      return Plural.Other;\n    default:\n      return Plural.Other;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n * \n * \\@howToUse \n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n * \n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * \n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n * \n * \\@stable\n */\nexport class NgClass implements DoCheck {\nprivate _iterableDiffer: IterableDiffer<string>|null;\nprivate _keyValueDiffer: KeyValueDiffer<string, any>|null;\nprivate _initialClasses: string[] = [];\nprivate _rawClass: string[]|Set<string>|{[klass: string]: any};\n/**\n * @param {?} _iterableDiffers\n * @param {?} _keyValueDiffers\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _iterableDiffers: IterableDiffers,\nprivate _keyValueDiffers: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset klass(v: string) {\n    this._applyInitialClasses(true);\n    this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n    this._applyInitialClasses(false);\n    this._applyClasses(this._rawClass, false);\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset ngClass(v: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._cleanupClasses(this._rawClass);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const /** @type {?} */ iterableChanges = this._iterableDiffer.diff( /** @type {?} */((this._rawClass as string[])));\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */((this._rawClass as{[k: string]: any})));\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n/**\n * @param {?} rawClassVal\n * @return {?}\n */\nprivate _cleanupClasses(rawClassVal: string[]|{[klass: string]: any}): void {\n    this._applyClasses(rawClassVal, true);\n    this._applyInitialClasses(false);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n/**\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyInitialClasses(isCleanup: boolean) {\n    this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n  }\n/**\n * @param {?} rawClassVal\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyClasses(\n      rawClassVal: string[]|Set<string>|{[klass: string]: any}, isCleanup: boolean) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        ( /** @type {?} */((<any>rawClassVal))).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => {\n          if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n        });\n      }\n    }\n  }\n/**\n * @param {?} klass\n * @param {?} enabled\n * @return {?}\n */\nprivate _toggleClass(klass: string, enabled: any): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(\n          klass => { this._renderer.setElementClass(this._ngEl.nativeElement, klass, !!enabled); });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngClass]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'klass': [{ type: Input, args: ['class', ] },],\n'ngClass': [{ type: Input },],\n};\n}\n\nfunction NgClass_tsickle_Closure_declarations() {\n/** @type {?} */\nNgClass.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgClass.ctorParameters;\n/** @type {?} */\nNgClass.propDecorators;\n/** @type {?} */\nNgClass.prototype._iterableDiffer;\n/** @type {?} */\nNgClass.prototype._keyValueDiffer;\n/** @type {?} */\nNgClass.prototype._initialClasses;\n/** @type {?} */\nNgClass.prototype._rawClass;\n/** @type {?} */\nNgClass.prototype._iterableDiffers;\n/** @type {?} */\nNgClass.prototype._keyValueDiffers;\n/** @type {?} */\nNgClass.prototype._ngEl;\n/** @type {?} */\nNgClass.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, Provider, SimpleChanges, Type, ViewContainerRef} from '@angular/core';\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n * \n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n * \n * ### Fine tune control\n * \n * You can control the component creation process by using the following optional attributes:\n * \n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n * \n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n * \n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n * \n * ### Syntax\n * \n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n * \n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n * \n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n * ## Example\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n * \n * A more complete example with additional options:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n * A more complete example with ngModuleFactory:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n * \n * \\@experimental\n */\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n   ngComponentOutlet: Type<any>;\n   ngComponentOutletInjector: Injector;\n   ngComponentOutletContent: any[][];\n   ngComponentOutletNgModuleFactory: NgModuleFactory<any>;\nprivate _componentRef: ComponentRef<any>|null = null;\nprivate _moduleRef: NgModuleRef<any>|null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const /** @type {?} */ parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const /** @type {?} */ componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngComponentOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngComponentOutlet': [{ type: Input },],\n'ngComponentOutletInjector': [{ type: Input },],\n'ngComponentOutletContent': [{ type: Input },],\n'ngComponentOutletNgModuleFactory': [{ type: Input },],\n};\n}\n\nfunction NgComponentOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgComponentOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgComponentOutlet.ctorParameters;\n/** @type {?} */\nNgComponentOutlet.propDecorators;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutlet;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletInjector;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletContent;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletNgModuleFactory;\n/** @type {?} */\nNgComponentOutlet.prototype._componentRef;\n/** @type {?} */\nNgComponentOutlet.prototype._moduleRef;\n/** @type {?} */\nNgComponentOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n/**\n * \\@stable\n */\nexport class NgForOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngForOf\n * @param {?} index\n * @param {?} count\n */\nconstructor(\npublic $implicit: T,\npublic ngForOf: NgIterable<T>,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfContext.prototype.$implicit;\n/** @type {?} */\nNgForOfContext.prototype.ngForOf;\n/** @type {?} */\nNgForOfContext.prototype.index;\n/** @type {?} */\nNgForOfContext.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n * \n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; index as i; trackBy: trackByFn\">...</li>`\n * \n * With `<ng-template>` element:\n * \n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck, OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T>|null = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfContext<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>( /** @type {?} */((null)), this.ngForOf, -1, -1), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = /** @type {?} */(( this._viewContainer.get(adjustedPreviousIndex)));\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */((\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\nprivate _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngForOf': [{ type: Input },],\n'ngForTrackBy': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n\n/**\n * @deprecated from v4.0.0 - Use NgForOf<any> instead.\n */\nexport type NgFor = NgForOf<any>;\n/**\n * @deprecated from v4.0.0 - Use NgForOf instead.\n */\nexport const NgFor = NgForOf;\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * ## Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * ## Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * ## Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * ## Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in folowing example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngIf': [{ type: Input },],\n'ngIfThen': [{ type: Input },],\n'ngIfElse': [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\n/**\n * \\@stable\n */\nexport class NgIfContext {\npublic $implicit: any = null;\npublic ngIf: any = null;\n}\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n/** @type {?} */\nNgIfContext.prototype.ngIf;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\nexport class SwitchView {\nprivate _created = false;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n/**\n * @param {?} created\n * @return {?}\n */\nenforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\nfunction SwitchView_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchView.prototype._created;\n/** @type {?} */\nSwitchView.prototype._viewContainerRef;\n/** @type {?} */\nSwitchView.prototype._templateRef;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * \\@description \n * \n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n * \n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n * \n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n * \n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n * \n * \\@stable\n */\nexport class NgSwitch {\nprivate _defaultViews: SwitchView[];\nprivate _defaultUsed = false;\nprivate _caseCount = 0;\nprivate _lastCaseCheckIndex = 0;\nprivate _lastCasesMatched = false;\nprivate _ngSwitch: any;\n/**\n * @param {?} newValue\n * @return {?}\n */\nset ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_addCase(): number { return this._caseCount++; }\n/**\n * \\@internal\n * @param {?} view\n * @return {?}\n */\n_addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_matchCase(value: any): boolean {\n    const /** @type {?} */ matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n/**\n * @param {?} useDefault\n * @return {?}\n */\nprivate _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\n        const /** @type {?} */ defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitch': [{ type: Input },],\n};\n}\n\nfunction NgSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitch.ctorParameters;\n/** @type {?} */\nNgSwitch.propDecorators;\n/** @type {?} */\nNgSwitch.prototype._defaultViews;\n/** @type {?} */\nNgSwitch.prototype._defaultUsed;\n/** @type {?} */\nNgSwitch.prototype._caseCount;\n/** @type {?} */\nNgSwitch.prototype._lastCaseCheckIndex;\n/** @type {?} */\nNgSwitch.prototype._lastCasesMatched;\n/** @type {?} */\nNgSwitch.prototype._ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n *             given expression evaluate to respectively the same/different value as the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n * ```\n * \\@description \n * \n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n * \n * If multiple match expressions match the switch expression value, all of them are displayed.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchCase implements DoCheck {\nprivate _view: SwitchView;\n\n  \n  ngSwitchCase: any;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\nprivate ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n/**\n * @return {?}\n */\nngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitchCase': [{ type: Input },],\n};\n}\n\nfunction NgSwitchCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchCase.ctorParameters;\n/** @type {?} */\nNgSwitchCase.propDecorators;\n/** @type {?} */\nNgSwitchCase.prototype._view;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitchCase;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n * match the\n *             switch expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n * \n * \\@description \n * \n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n       ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgSwitchDefault_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchDefault.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchDefault.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../localization';\n\nimport {SwitchView} from './ng_switch';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n * \n * \\@description \n * \n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n * \n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n * \n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n * \n * \\@experimental\n */\nexport class NgPlural {\nprivate _switchValue: number;\nprivate _activeView: SwitchView;\nprivate _caseViews: {[k: string]: SwitchView} = {};\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n/**\n * @param {?} value\n * @param {?} switchView\n * @return {?}\n */\naddCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n/**\n * @return {?}\n */\nprivate _updateView(): void {\n    this._clearViews();\n\n    const /** @type {?} */ cases = Object.keys(this._caseViews);\n    const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n/**\n * @return {?}\n */\nprivate _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n/**\n * @param {?} view\n * @return {?}\n */\nprivate _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngPlural]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgLocalization, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngPlural': [{ type: Input },],\n};\n}\n\nfunction NgPlural_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPlural.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPlural.ctorParameters;\n/** @type {?} */\nNgPlural.propDecorators;\n/** @type {?} */\nNgPlural.prototype._switchValue;\n/** @type {?} */\nNgPlural.prototype._activeView;\n/** @type {?} */\nNgPlural.prototype._caseViews;\n/** @type {?} */\nNgPlural.prototype._localization;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n *             given expression matches the plural expression according to CLDR rules.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n * \n * See {\\@link NgPlural} for more details and example.\n * \n * \\@experimental\n */\nexport class NgPluralCase {\n/**\n * @param {?} value\n * @param {?} template\n * @param {?} viewContainer\n * @param {?} ngPlural\n */\nconstructor(\npublic value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef,  ngPlural: NgPlural) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngPluralCase]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase', ] }, ]},\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: NgPlural, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgPluralCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPluralCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPluralCase.ctorParameters;\n/** @type {?} */\nNgPluralCase.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Update an HTML element styles.\n * \n * \\@howToUse \n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n * \n * \\@stable\n */\nexport class NgStyle implements DoCheck {\nprivate _ngStyle: {[key: string]: string};\nprivate _differ: KeyValueDiffer<string, string|number>;\n/**\n * @param {?} _differs\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _differs: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (!this._differ && v) {\n      this._differ = this._differs.find(v).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n/**\n * @param {?} nameAndUnit\n * @param {?} value\n * @return {?}\n */\nprivate _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */(( value as string)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngStyle]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngStyle': [{ type: Input },],\n};\n}\n\nfunction NgStyle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgStyle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgStyle.ctorParameters;\n/** @type {?} */\nNgStyle.propDecorators;\n/** @type {?} */\nNgStyle.prototype._ngStyle;\n/** @type {?} */\nNgStyle.prototype._differ;\n/** @type {?} */\nNgStyle.prototype._differs;\n/** @type {?} */\nNgStyle.prototype._ngEl;\n/** @type {?} */\nNgStyle.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * ## Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@experimental\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n * @param {?} context\n * @return {?}\n */\nset ngOutletContext(context: Object) { this.ngTemplateOutletContext = context; }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (this._viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n    }\n\n    if (this.ngTemplateOutlet) {\n      this._viewRef = this._viewContainerRef.createEmbeddedView(\n          this.ngTemplateOutlet, this.ngTemplateOutletContext);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngTemplateOutletContext': [{ type: Input },],\n'ngTemplateOutlet': [{ type: Input },],\n'ngOutletContext': [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgFor, NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgFor,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet\n};\n\n\n\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const /** @type {?} */ COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n\n/**\n * A collection of deprecated directives that are no longer part of the core module.\n */\nexport const /** @type {?} */ COMMON_DEPRECATED_DIRECTIVES: Provider[] = [NgFor];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ɵisObservable, ɵisPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ISubscription} from 'rxjs/Subscription';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): ISubscription\n      |Promise<any>;\n  dispose(subscription: ISubscription|Promise<any>): void;\n  onDestroy(subscription: ISubscription|Promise<any>): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Observable<any>, updateLatestValue: any): ISubscription {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: ISubscription): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: ISubscription): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: Promise<any>): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: Promise<any>): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: any = null;\nprivate _latestReturnedValue: any = null;\nprivate _subscription: ISubscription|Promise<any>|null = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\nprivate _strategy: SubscriptionStrategy = /** @type {?} */(( null));\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>): T|null;\n  transform<T>(obj: Promise<T>): T|null;\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform( /** @type {?} */((obj as any)));\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\nprivate _dispose(): void {\n    this._strategy.dispose( /** @type {?} */((this._subscription)));\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\n\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} __3\n * @return {?}\n */\nstatic format(\n      num: number, locale: string, style: NumberFormatStyle,\n      {minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency,\n       currencyAsSymbol = false}: {\n        minimumIntegerDigits?: number,\n        minimumFractionDigits?: number,\n        maximumFractionDigits?: number,\n        currency?: string|null,\n        currencyAsSymbol?: boolean\n      } = {}): string {\n    const /** @type {?} */ options: Intl.NumberFormatOptions = {\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      style: NumberFormatStyle[style].toLowerCase()\n    };\n\n    if (style == NumberFormatStyle.Currency) {\n      options.currency = typeof currency == 'string' ? currency : undefined;\n      options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, options).format(num);\n  }\n}\n\ntype DateFormatterFn = (date: Date, locale: string) => string;\n\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n\nconst /** @type {?} */ PATTERN_ALIASES: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed during closure compilation.\n  'yMMMdjms': datePartGetterFactory(combine([\n    digitCondition('year', 1),\n    nameCondition('month', 3),\n    digitCondition('day', 1),\n    digitCondition('hour', 1),\n    digitCondition('minute', 1),\n    digitCondition('second', 1),\n  ])),\n  'yMdjm': datePartGetterFactory(combine([\n    digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n    digitCondition('hour', 1), digitCondition('minute', 1)\n  ])),\n  'yMMMMEEEEd': datePartGetterFactory(combine([\n    digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n    digitCondition('day', 1)\n  ])),\n  'yMMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n  'yMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n  'yMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n  'jms': datePartGetterFactory(combine(\n      [digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n  'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed.\n  'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n  'yy': datePartGetterFactory(digitCondition('year', 2)),\n  'y': datePartGetterFactory(digitCondition('year', 1)),\n  'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n  'MMM': datePartGetterFactory(nameCondition('month', 3)),\n  'MM': datePartGetterFactory(digitCondition('month', 2)),\n  'M': datePartGetterFactory(digitCondition('month', 1)),\n  'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n  'L': datePartGetterFactory(nameCondition('month', 1)),\n  'dd': datePartGetterFactory(digitCondition('day', 2)),\n  'd': datePartGetterFactory(digitCondition('day', 1)),\n  'HH': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n  'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n  'hh': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n  'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'jj': datePartGetterFactory(digitCondition('hour', 2)),\n  'j': datePartGetterFactory(digitCondition('hour', 1)),\n  'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n  'm': datePartGetterFactory(digitCondition('minute', 1)),\n  'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n  's': datePartGetterFactory(digitCondition('second', 1)),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit\n  // fractions\n  'sss': datePartGetterFactory(digitCondition('second', 3)),\n  'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n  'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n  'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n  'E': datePartGetterFactory(nameCondition('weekday', 1)),\n  'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'Z': timeZoneGetter('short'),\n  'z': timeZoneGetter('long'),\n  'ww': datePartGetterFactory({}),  // Week of year, padded (00-53). Week 01 is the week with the\n                                    // first Thursday of the year. not support ?\n  'w':\n      datePartGetterFactory({}),  // Week of year (0-53). Week 1 is the week with the first Thursday\n                                  // of the year not support ?\n  'G': datePartGetterFactory(nameCondition('era', 1)),\n  'GG': datePartGetterFactory(nameCondition('era', 2)),\n  'GGG': datePartGetterFactory(nameCondition('era', 3)),\n  'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = inner(date, locale);\n    return result.length == 1 ? '0' + result : result;\n  };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date: Date, locale: string, options: Intl.DateTimeFormatOptions): string {\n  return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter(timezone: string): DateFormatterFn {\n  // To workaround `Intl` API restriction for single timezone let format with 24 hours\n  const /** @type {?} */ options = {hour: '2-digit', hour12: false, timeZoneName: timezone};\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = intlDateFormat(date, locale, options);\n    // Then extract first 3 letters that related to hours\n    return result ? result.substring(3) : '';\n  };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(\n    options: Intl.DateTimeFormatOptions, value: boolean): Intl.DateTimeFormatOptions {\n  options.hour12 = value;\n  return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  result[prop] = len === 2 ? '2-digit' : 'numeric';\n  return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  if (len < 4) {\n    result[prop] = len > 1 ? 'short' : 'narrow';\n  } else {\n    result[prop] = 'long';\n  }\n\n  return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options: Intl.DateTimeFormatOptions[]): Intl.DateTimeFormatOptions {\n  return ( /** @type {?} */((<any>Object))).assign({}, ...options);\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret: Intl.DateTimeFormatOptions): DateFormatterFn {\n  return (date: Date, locale: string): string => intlDateFormat(date, locale, ret);\n}\n\nconst /** @type {?} */ DATE_FORMATTER_CACHE = new Map<string, string[]>();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format: string, date: Date, locale: string): string {\n  const /** @type {?} */ fn = PATTERN_ALIASES[format];\n\n  if (fn) return fn(date, locale);\n\n  const /** @type {?} */ cacheKey = format;\n  let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\n\n  if (!parts) {\n    parts = [];\n    let /** @type {?} */ match: RegExpExecArray|null;\n    DATE_FORMATS_SPLIT.exec(format);\n\n    let /** @type {?} */ _format: string|null = format;\n    while (_format) {\n      match = DATE_FORMATS_SPLIT.exec(_format);\n      if (match) {\n        parts = parts.concat(match.slice(1));\n        _format = /** @type {?} */(( parts.pop()));\n      } else {\n        parts.push(_format);\n        _format = null;\n      }\n    }\n\n    DATE_FORMATTER_CACHE.set(cacheKey, parts);\n  }\n\n  return parts.reduce((text, part) => {\n    const /** @type {?} */ fn = DATE_FORMATS[part];\n    return text + (fn ? fn(date, locale) : partToTime(part));\n  }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part: string): string {\n  return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    return dateFormatter(pattern, date, locale);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NumberFormatStyle, NumberFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && isNumeric(value) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number|undefined = undefined;\n  let /** @type {?} */ minFraction: number|undefined = undefined;\n  let /** @type {?} */ maxFraction: number|undefined = undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode,\n        symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text: string): number {\n  const /** @type {?} */ result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isNumeric(value: any): boolean {\n  return !isNaN(value - parseFloat(value));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {DateFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\nimport {isNumeric} from './number_pipe';\n\nconst /** @type {?} */ ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a date according to locale rules.\n * \\@howToUse `date_expression | date[:format]`\n * \\@description \n * \n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n * \n * \n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n * \n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n * \n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n * \n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n * \n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n * \n * ### Examples\n * \n * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n * in the _local_ time and locale is 'en-US':\n * \n * ```\n *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n * \n * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\n * \n * \\@stable\n */\nexport class DatePipe implements PipeTransform {\n/**\n * \\@internal\n */\nstatic _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} pattern\n * @return {?}\n */\ntransform(value: any, pattern: string = 'mediumDate'): string|null {\n    let /** @type {?} */ date: Date;\n\n    if (isBlank(value) || value !== value) return null;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (isNumeric(value)) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n      /**\n      * For ISO Strings without time the day, month and year must be extracted from the ISO String\n      * before Date creation to avoid time offset and errors in the new Date.\n      * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      * date, some browsers (e.g. IE 9) will throw an invalid Date error\n      * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      * is applied\n      * Note: ISO months are 0 for January, 1 for February, ...\n      */\n      const [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DatePipe_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nDatePipe._ALIASES;\n/** @type {?} */\nDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatePipe.ctorParameters;\n/** @type {?} */\nDatePipe.prototype._locale;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isBlank(obj: any): boolean {\n  return obj == null || obj === '';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isDate(obj: any): obj is Date {\n  return obj instanceof Date && !isNaN(obj.valueOf());\n}\n/**\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match: RegExpMatchArray): Date {\n  const /** @type {?} */ date = new Date(0);\n  let /** @type {?} */ tzHour = 0;\n  let /** @type {?} */ tzMin = 0;\n  const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  if (match[9]) {\n    tzHour = toInt(match[9] + match[10]);\n    tzMin = toInt(match[9] + match[11]);\n  }\n  dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n  const /** @type {?} */ h = toInt(match[4] || '0') - tzHour;\n  const /** @type {?} */ m = toInt(match[5] || '0') - tzMin;\n  const /** @type {?} */ s = toInt(match[6] || '0');\n  const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction toInt(str: string): number {\n  return parseInt(str, 10);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {NgLocalization, getPluralCategory} from '../localization';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _INTERPOLATION_REGEXP: RegExp = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * \\@howToUse `expression | i18nPlural:mapping`\n * \\@description \n * \n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n * \n * \\@experimental\n */\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgLocalization, },\n];\n}\n\nfunction I18nPluralPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nPluralPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nPluralPipe.ctorParameters;\n/** @type {?} */\nI18nPluralPipe.prototype._localization;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Generic selector that displays the string that matches the current value.\n * \\@howToUse `expression | i18nSelect:mapping`\n * \\@description \n * \n *  Where `mapping` is an object that indicates the text that should be displayed\n *  for different values of the provided `expression`.\n *  If none of the keys of the mapping match the value of the `expression`, then the content\n *  of the `other` key is returned when present, otherwise an empty string is returned.\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n * \n *  \\@experimental\n */\nexport class I18nSelectPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} mapping\n * @return {?}\n */\ntransform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nSelect', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction I18nSelectPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nSelectPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nSelectPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Converts value into JSON string.\n * \\@howToUse `expression | json`\n * \\@description \n * \n * Converts value into string using `JSON.stringify`. Useful for debugging.\n * \n * ### Example\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n * \n * \\@stable\n */\nexport class JsonPipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: any): string { return JSON.stringify(value, null, 2); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'json', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\n * \\@description \n * \n * Where the input expression is a `List` or `String`, and:\n * - `start`: The starting index of the subset to return.\n *   - **a positive integer**: return the item at `start` index and all items after\n *     in the list or string expression.\n *   - **a negative integer**: return the item at `start` index from the end and all items after\n *     in the list or string expression.\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\n *   - **if negative and greater than the size of the expression**: return entire list or string.\n * - `end`: The ending index of the subset to return.\n *   - **omitted**: return all items until the end.\n *   - **if positive**: return all items before `end` index of the list or string.\n *   - **if negative**: return all items before `end` index from the end of the list or string.\n * \n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n * \n * When operating on a [List], the returned list is always a copy even when all\n * the elements are being returned.\n * \n * When operating on a blank value, the pipe returns the blank value.\n * \n * ## List Example\n * \n * This `ngFor` example:\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n * \n * produces the following:\n * \n *     <li>b</li>\n *     <li>c</li>\n * \n * ## String Examples\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n * \n * \\@stable\n */\nexport class SlicePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} start\n * @param {?=} end\n * @return {?}\n */\ntransform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlicePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSlicePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlicePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\n\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DatePipe} from './date_pipe';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DatePipe,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe\n};\n\n\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const /** @type {?} */ COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DEPRECATED_DIRECTIVES, COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './localization';\nimport {COMMON_PIPES} from './pipes/index';\n/**\n * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\n * \n * \\@stable\n */\nexport class CommonModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthService, AuthServiceConfig } from './auth.service';\n/**\n * @param {?} config\n * @return {?}\n */\nexport function configFactory(config: AuthServiceConfig) {\n  return config;\n}\nexport class SocialLoginModule {\n/**\n * @param {?} config\n * @return {?}\n */\npublic static initialize(config: AuthServiceConfig): ModuleWithProviders {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [\n        AuthService,\n        {\n          provide: AuthServiceConfig,\n          useValue: config\n        }\n      ]\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    AuthService\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SocialLoginModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSocialLoginModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSocialLoginModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class SocialUser {\n  provider: string;\n  id: string;\n  email: string;\n  name: string;\n  photoUrl: string;\n  firstName: string;\n  lastName: string;\n  authToken: string;\n  idToken: string; // Reference https://developers.google.com/identity/sign-in/web/backend-auth\n}\n\nfunction SocialUser_tsickle_Closure_declarations() {\n/** @type {?} */\nSocialUser.prototype.provider;\n/** @type {?} */\nSocialUser.prototype.id;\n/** @type {?} */\nSocialUser.prototype.email;\n/** @type {?} */\nSocialUser.prototype.name;\n/** @type {?} */\nSocialUser.prototype.photoUrl;\n/** @type {?} */\nSocialUser.prototype.firstName;\n/** @type {?} */\nSocialUser.prototype.lastName;\n/** @type {?} */\nSocialUser.prototype.authToken;\n/** @type {?} */\nSocialUser.prototype.idToken;\n}\n\n","import { LoginProvider } from './login-provider';\nimport { SocialUser } from './user';\n/**\n * @abstract\n */\nexport abstract class BaseLoginProvider implements LoginProvider {\nconstructor() {}\n/**\n * @abstract\n * @return {?}\n */\ninitialize() {}\n/**\n * @abstract\n * @return {?}\n */\nsignIn() {}\n/**\n * @abstract\n * @return {?}\n */\nsignOut() {}\n/**\n * @param {?} id\n * @param {?} src\n * @param {?} onload\n * @return {?}\n */\nloadScript(id: string, src: string, onload: any): void {\n      if (document.getElementById(id)) { return; }\n\n      let /** @type {?} */ signInJS = document.createElement(\"script\");\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n      document.head.appendChild(signInJS);\n  }\n}\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/user';\n\ndeclare let gapi: any;\nexport class GoogleLoginProvider extends BaseLoginProvider {\npublic static readonly PROVIDER_ID: string = \"GOOGLE\";\n\n  protected auth2: any;\n/**\n * @param {?} clientId\n */\nconstructor(private clientId: string) { super(); }\n/**\n * @return {?}\n */\ninitialize(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      this.loadScript(GoogleLoginProvider.PROVIDER_ID,\n        \"//apis.google.com/js/platform.js\",\n        () => {\n          gapi.load('auth2', () => {\n            this.auth2 = gapi.auth2.init({\n              client_id: this.clientId,\n              scope: 'email'\n            });\n\n            this.auth2.then(() => {\n              if (this.auth2.isSignedIn.get()) {\n                let /** @type {?} */ user: SocialUser = new SocialUser();\n                let /** @type {?} */ profile = this.auth2.currentUser.get().getBasicProfile();\n                let /** @type {?} */ token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\n                let /** @type {?} */ backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\n    \n                user.id = profile.getId();\n                user.name = profile.getName();\n                user.email = profile.getEmail();\n                user.photoUrl = profile.getImageUrl();\n                user.firstName = profile.getGivenName();\n                user.lastName = profile.getFamilyName();\n                user.authToken = token;\n                user.idToken = backendToken;\n                resolve(user);\n              }\n            });\n          });\n      });\n    });\n  }\n/**\n * @return {?}\n */\nsignIn(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      let /** @type {?} */ promise = this.auth2.signIn();\n\n      promise.then(() => {\n        let /** @type {?} */ user: SocialUser = new SocialUser();\n        let /** @type {?} */ profile = this.auth2.currentUser.get().getBasicProfile();\n        let /** @type {?} */ token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\n        let /** @type {?} */ backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\n\n        user.id = profile.getId();\n        user.name = profile.getName();\n        user.email = profile.getEmail();\n        user.photoUrl = profile.getImageUrl();\n        user.authToken = token;\n        user.idToken = backendToken;\n        resolve(user);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nsignOut(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.auth2.signOut().then((err: any) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n}\n\nfunction GoogleLoginProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nGoogleLoginProvider.PROVIDER_ID;\n/** @type {?} */\nGoogleLoginProvider.prototype.auth2;\n/** @type {?} */\nGoogleLoginProvider.prototype.clientId;\n}\n\n","import { BaseLoginProvider } from '../entities/base-login-provider';\nimport { SocialUser } from '../entities/user';\n\ndeclare let FB: any;\nexport class FacebookLoginProvider extends BaseLoginProvider {\npublic static readonly PROVIDER_ID: string = \"FACEBOOK\";\n/**\n * @param {?} clientId\n * @param {?=} scope\n */\nconstructor(private clientId: string,\nprivate scope = 'email,public_profile') { super(); }\n/**\n * @return {?}\n */\ninitialize(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      this.loadScript(FacebookLoginProvider.PROVIDER_ID,\n        \"//connect.facebook.net/en_US/sdk.js\",\n        () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: 'v2.9'\n          });\n          // FB.AppEvents.logPageView(); #FIX for #18\n\n          FB.getLoginStatus(function (response: any) {\n            if (response.status === 'connected') {\n                let /** @type {?} */ authResponse = response.authResponse;\n                FB.api('/me?fields=name,email,picture,first_name,last_name', (response: any) => {\n                let /** @type {?} */ user: SocialUser = new SocialUser();\n\n                user.id = response.id;\n                user.name = response.name;\n                user.email = response.email;\n                user.photoUrl = \"https://graph.facebook.com/\" + response.id + \"/picture?type=normal\";\n                user.firstName = response.first_name;\n                user.lastName = response.last_name;\n                user.authToken = authResponse.accessToken;\n\n                resolve(user);\n              });\n            }\n          });\n        });\n    });\n  }\n/**\n * @return {?}\n */\nsignIn(): Promise<SocialUser> {\n    return new Promise((resolve, reject) => {\n      FB.login((response: any) => {\n        if (response.authResponse) {\n          let /** @type {?} */ authResponse = response.authResponse;\n          FB.api('/me?fields=name,email,picture,first_name,last_name', (response: any) => {\n            let /** @type {?} */ user: SocialUser = new SocialUser();\n\n            user.id = response.id;\n            user.name = response.name;\n            user.email = response.email;\n            user.photoUrl = \"https://graph.facebook.com/\" + response.id + \"/picture?type=normal\";\n            user.firstName = response.first_name;\n            user.lastName = response.last_name;\n            user.authToken = authResponse.accessToken;\n\n            resolve(user);\n          });\n        }\n      }, {scope: this.scope});\n    });\n  }\n/**\n * @return {?}\n */\nsignOut(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      FB.logout((response: any) => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nfunction FacebookLoginProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nFacebookLoginProvider.PROVIDER_ID;\n/** @type {?} */\nFacebookLoginProvider.prototype.clientId;\n/** @type {?} */\nFacebookLoginProvider.prototype.scope;\n}\n\n"],"names":["__window","window","__self","self","WorkerGlobalScope","_root","global","Error","x","Array","isArray","length","tryCatchTarget","e","apply","this","arguments","errorObject_1","fn","tryCatcher","errors","_super","err","call","map","i","toString","join","name","stack","message","__extends","reduce","errs","concat","UnsubscriptionError_1","unsubscribe","_unsubscribe","empty","Subscription","hasErrors","closed","_parent","_parents","_subscriptions","index","len","remove","isFunction_1","tryCatch_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","push","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","next","value","error","complete","Symbol","root_1","exports","for","destinationOrNext","destination","Observer_1","Subscriber","syncErrorThrowable","add","SafeSubscriber","rxSubscriber_1","subscriber","isStopped","_next","_error","_complete","Subscription_1","_parentSubscriber","observerOrNext","context","Object","create","bind","_context","__tryOrSetError","__tryOrUnsub","syncErrorValue","syncErrorThrown","wrappedComplete","_this","nextOrObserver","Subscriber_1","$$observable","observable","getSymbolObservable","fns","input","prev","noop_1","_i","pipeFromArray","subscribe","_subscribe","Observable","operator","source","sink","toSubscriber_1","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","operations","pipe_1","subject","SubjectSubscription","observers","subscriberIndex","Subject","SubjectSubscriber","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","hasError","thrownError","SubjectSubscription_1","Observable_1","AsyncSubject","hasCompleted","hasNext","Subject_1","arg","callbackFunc","selector","args","scheduler","BoundCallbackObservable","func","schedule","dispatch","AsyncSubject_1","handler","innerArgs","handlerFn","result_1","state","result_2","dispatchError","dispatchNext","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","bindNodeCallback","bindNodeCallback_1","_isScalar","ScalarObservable","done","EmptyObservable","array","ArrayObservable","isScheduler_1","pop","ScalarObservable_1","EmptyObservable_1","count","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","innerSub","then","root","iterator","Set_1","Map_1","keys","getOwnPropertyNames","prototype","key","symbolIteratorPonyfill","InnerSubscriber","notifyNext","notifyError","notifyComplete","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isPromise_1","setTimeout","iterator_1","item","obs","TypeError","msg","none","observables","project","lift","ArrayObservable_1","CombineLatestOperator","CombineLatestSubscriber","values","active","toRespond","subscribeToResult_1","unused","oldVal","_tryProject","OuterSubscriber_1","combineLatest_1","combineLatest","of","promise","PromiseObservable","obj","StringIterator","undefined","ArrayIterator","getIterator","IteratorObservable","return","str","idx","charAt","arr","o","isNaN","isFinite","valueAsNumber","Math","floor","abs","maxSafeInteger","toLength","pow","arrayLike","ArrayLikeObservable","kind","hasValue","Notification","observer","observe","do","throw","undefinedValueNotification","completeNotification","delay","ObserveOnOperator","ObserveOnSubscriber","notification","ObserveOnMessage","scheduleMessage","Notification_1","createNext","createError","createComplete","ish","FromObservable","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","_tryNext","buffer","_innerSub","_notifyResultSelector","mergeMap_1","identity_1","mergeAll_1","from_1","concatAll_1","of_1","concat_1","observableFactory","DeferObservable","DeferSubscriber","factory","tryDefer","_callFactory","defer","defer_1","empty_1","sources","ForkJoinObservable","ForkJoinSubscriber","total","innerSubscription","_hasValue","haveValues","completed","forkJoin","forkJoin_1","from","sourceObj","eventName","options","FromEventObservable","target","setupSubscription","addEventListener","removeEventListener","source_1","on","off","source_2","addListener","removeListener","source_3","fromEvent","fromEvent_1","addHandler","removeHandler","FromEventPatternObservable","_callSelector","retValue","_callAddHandler","errorSubscriber","fromEventPattern","fromEventPattern_1","fromPromise","fromPromise_1","selfSelector","initialState","condition","iterate","GenerateObservable","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate","generate_1","thenSource","elseSource","IfObservable","IfSubscriber","tryIf","if","if_1","val","parseFloat","work","Action","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","_execute","errored","errorValue","actions","Action_1","SchedulerAction","now","Scheduler","Date","AsyncScheduler","action","execute","Scheduler_1","AsyncScheduler_1","AsyncAction_1","period","isNumeric_1","async_1","IntervalObservable","interval","interval_1","last","merge","merge_1","RaceOperator","RaceSubscriber","hasFirst","race","race_1","NeverObservable","never","never_1","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_1","onErrorResumeNext","PairsObservable","pairs","pairs_1","start","_count","RangeObservable","range","range_1","resourceFactory","UsingObservable","resource","UsingSubscriber","tryUse","using","using_1","ErrorObservable","throw_1","dueTime","isDate_1","TimerObservable","initialDelay","timer","timer_1","zipStatic","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","shouldComplete","nextResult","isComplete","notifyInactive","checkIterators","zip_1","zip","thisArg","MapOperator","MapSubscriber","url","headers","AjaxObservable","method","body","mapResponse","map_1","response","responseType","urlOrRequest","request","async","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","timeout","prop","hasOwnProperty","AjaxSubscriber","get","ajaxGet","post","ajaxPost","delete","ajaxDelete","put","ajaxPut","patch","ajaxPatch","getJSON","ajaxGetJSON","FormData","serializeBody","send","xhr","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","JSON","stringify","setRequestHeader","progressSubscriber","AjaxTimeoutError","ontimeout","xhrTimeout","upload","xhrProgress_1","xhrError_1","onprogress","AjaxError","onerror","readyState","status_1","status","responseText","onreadystatechange","xhrReadyStateChange","abort","originalEvent","parseXhrResponse","parse","responseXML","ajax","ajax_1","QueueAction","QueueAction_1","bufferSize","windowTime","_bufferSize","_windowTime","ReplaySubject","_getNow","_events","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","time","max","k","assign","assignImpl","getAssign","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign_1","ReplaySubject_1","WebSocketSubject","data","sock","socket","subMsg","unsubMsg","messageFilter","protocol","binaryType","close","onopen","openObserver","queue","closingObserver","code","reason","_resetState","onclose","closeObserver","wasClean","onmessage","_connectSocket","webSocket","webSocket_1","closingNotifier","BufferOperator","BufferSubscriber","buffer_1","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferCount_1","bufferCount","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","contexts","onBufferFull","closeContext","Context","prevContext","bufferTime_1","bufferTime","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferToggle","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","bufferWhen","CatchOperator","caught","CatchSubscriber","err2","_unsubscribeAndRecycle","catchError_1","catch","catch_1","_catch","combineAll_1","combineAll","concatAll","concatMap_1","concatMap","innerObservable","concatMapTo_1","concatMapTo","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","DeMaterializeOperator","DeMaterializeSubscriber","dematerialize_1","dematerialize","durationSelector","DebounceOperator","DebounceSubscriber","emitValue","duration","durationSubscription","debounce_1","debounce","DebounceTimeOperator","DebounceTimeSubscriber","clearDebounce","lastValue","debouncedSubscription","debouncedNext","debounceTime_1","debounceTime","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","defaultIfEmpty","delayFor","DelayOperator","DelaySubscriber","delay_1","DelayMessage","_schedule","scheduleNotification","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","delayNotifierSubscriptions","notifierSubscription","SubscriptionDelaySubscriber","subscribeToSource","sourceSubscribed","delayWhen_1","MinimalSet","has","_values","delayWhen","Set","minimalSetImpl","keySelector","flushes","DistinctOperator","DistinctSubscriber","clear","_useKeySelector","_finalizeNext","distinct_1","distinct","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","y","hasKey","Boolean","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","DoOperator","DoSubscriber","safeSubscriber","tap_1","do_1","_do","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaust_1","exhaust","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","exhaustMap","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","expand","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","elementAt_1","elementAt","FilterOperator","FilterSubscriber","filter_1","filter","callback","FinallyOperator","FinallySubscriber","finalize_1","finally","finally_1","_finally","FindValueOperator","yieldIndex","FindValueSubscriber","find_1","find","findIndex_1","findIndex","FirstOperator","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","_emitted","EmptyError_1","first_1","first","MapPolyfill","_keys","size","cb","Map","MapPolyfill_1","FastMap","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","_group","groups","FastMap_1","element","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","forEach","attemptedToUnsubscribe","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","groupBy","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","ignoreElements","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","audit","auditTime_1","auditTime","LastOperator","LastSubscriber","last_1","let","let_1","letBind","EveryOperator","EverySubscriber","everyValueMatch","every_1","every","MapToOperator","MapToSubscriber","mapTo_1","mapTo","MaterializeOperator","MaterializeSubscriber","materialize_1","materialize","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","TakeLastOperator","TakeLastSubscriber","ring","scan_1","takeLast_1","acc","comparer","reduce_1","max_1","mergeAll","mergeMap","flatMap","MergeMapToOperator","MergeMapToSubscriber","mergeMapTo_1","flatMapTo","mergeMapTo","MergeScanOperator","MergeScanSubscriber","mergeScan_1","mergeScan","min","min_1","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","subjectFactory","ConnectableObservable","getSubject","_subject","_isComplete","ConnectableSubscriber","refCount_1","connectableProto","writable","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","multicast_1","multicast","observeOn","PairwiseOperator","PairwiseSubscriber","hasPrev","pairwise_1","pairwise","pred","notPred","not_1","partition_1","partition","properties","props","currentProp","p","pluck_1","pluck","publish_1","publish","_value","BehaviorSubject","getValue","BehaviorSubject_1","publishBehavior_1","publishBehavior","selectorOrScheduler","publishReplay_1","publishReplay","publishLast_1","publishLast","RepeatOperator","RepeatSubscriber","repeat_1","repeat","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","repeatWhen","RetryOperator","RetrySubscriber","retry_1","retry","RetryWhenOperator","RetryWhenSubscriber","retryWhen_1","retryWhen","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sample","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sampleTime_1","sampleTime","scan","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualCompareToSubscriber","_oneComplete","emit","checkValues","a","b","areEqual","nextB","sequenceEqual_1","sequenceEqual","shareSubjectFactory","share_1","share","shareReplay_1","shareReplay","SingleOperator","SingleSubscriber","seenValue","singleValue","applySingleValue","single_1","single","SkipOperator","SkipSubscriber","skip_1","skip","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipLast_1","skipLast","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipUntil","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","skipWhile","startWith_1","startWith","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","ImmediateDefinition","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","Function","partiallyApplied","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","event","globalMessageHandler","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","AsapAction","scheduled","Immediate_1","AsapScheduler","AsapAction_1","delayTime","asap_1","SubscribeOnObservable","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","subscribeOn","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchAll_1","switch","switch_1","_switch","switchMap","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","switchMapTo","TakeOperator","TakeSubscriber","take_1","take","takeLast","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeUntil","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","takeWhile","leading","trailing","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttle_1","throttle","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","throttleTime","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","TimeInterval","timeInterval_1","timeInterval","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timeoutWith","Timestamp","timestamp","timestamp_1","toArrayReducer","toArray_1","toArray","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowCount","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","windowTime_1","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowToggle","unsubscribeClosingNotification","closingNotification","windowWhen_1","windowWhen","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","withLatestFrom","zipAll_1","zipAll","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","SubscriptionLog_1","subscriptionLogs","oldSubscriptionLog","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","ColdObservable","messagesLength","frame","applyMixins_1","SubscriptionLoggable_1","HotObservable","maxFrames","VirtualTimeScheduler","VirtualAction","sort","sortActions","defaultMaxFrame","assertDeepEqual","VirtualTimeScheduler_1","TestScheduler","marbles","frameTimeFactor","parseMarbles","cold","ColdObservable_1","coldObservables","HotObservable_1","hotObservables","outerFrame","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","materializeInnerObservable","flushTests","toBe","expected","actualSubscriptionLogs","marblesArray","setup","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","RequestAnimationFrameDefinition","AnimationFrameAction","AnimationFrame_1","AnimationFrameScheduler","AnimationFrameAction_1","providers","provider","initialize","_user","_authState","AuthService","asObservable","providerId","providerObject","signIn","ERR_LOGIN_PROVIDER_NOT_FOUND","signOut","ERR_NOT_LOGGED_IN","type","Injectable","AuthServiceConfig","PlatformLocation","title","LocationStrategy","queryParams","platformStrategy","EventEmitter","_platformStrategy","browserBaseHref","getBaseHref","_baseHref","Location","stripTrailingSlash","_stripIndexHtml","onPopState","ev","path","forward","end","slashes","endsWith","startsWith","_platformLocation","onHashChange","HashLocationStrategy","includeHash","prepareExternalUrl","normalizeQueryParams","replaceState","ctorParameters","href","getBaseHrefFromDOM","PathLocationStrategy","externalUrl","cases","ngLocalization","getPluralCategory","NgLocaleLocalization","locale","nLike","parseInt","n","nDecimal","replace","v","f","t","split","toLowerCase","Plural","One","Other","Zero","Two","Few","Many","getPluralCase","NgLocalization","decorators","Inject","LOCALE_ID","_iterableDiffers","_keyValueDiffers","_ngEl","_renderer","NgClass","_cleanupClasses","_rawClass","_iterableDiffer","_keyValueDiffer","ɵisListLikeIterable","iterableChanges","diff","_applyIterableChanges","keyValueChanges","changes","forEachAddedItem","record","_toggleClass","currentValue","forEachChangedItem","forEachRemovedItem","rawClassVal","isCleanup","klass","enabled","setElementClass","nativeElement","Directive","IterableDiffers","KeyValueDiffers","ElementRef","Renderer","propDecorators","NgComponentOutlet","_viewContainerRef","_componentRef","ngComponentOutlet","elInjector","ngComponentOutletInjector","parentInjector","_moduleRef","destroy","ngComponentOutletNgModuleFactory","parentModule","NgModuleRef","injector","componentFactoryResolver","ViewContainerRef","Input","$implicit","ngForOf","NgForOfContext","_viewContainer","_template","_differs","NgForOf","_trackByFn","isDevMode","console","warn","_differ","ngForTrackBy","insertTuples","forEachOperation","adjustedPreviousIndex","previousIndex","view","createEmbeddedView","tuple","RecordViewTuple","move","_perViewChange","ilen","viewRef","TemplateRef","templateRef","NgIfContext","_thenTemplateRef","_updateView","NgIf","_thenViewRef","_elseViewRef","_elseTemplateRef","ngIfElse","_created","_templateRef","SwitchView","created","NgSwitch","newValue","matched","_ngSwitch","_lastCasesMatched","_lastCaseCheckIndex","_caseCount","_updateDefaultCases","useDefault","_defaultViews","_defaultUsed","enforceState","_view","viewContainer","NgSwitchCase","Host","ngSwitch","_addDefault","NgPlural","switchView","_caseViews","_activateView","_activeView","isANumber","ngPlural","addCase","template","NgPluralCase","NgStyle","_ngStyle","unit","setElementStyle","NgTemplateOutlet","ngTemplateOutletContext","_viewRef","ngTemplateOutlet","COMMON_DIRECTIVES","ObservableStrategy","PromiseStrategy","_ref","_latestValue","_strategy","AsyncPipe","_obj","_dispose","transform","_latestReturnedValue","ɵisPromise","_promiseStrategy","invalidPipeArgumentError","dispose","markForCheck","Pipe","pure","LowerCasePipe","TitleCasePipe","word","UpperCasePipe","toUpperCase","NumberFormatStyle","Decimal","Percent","NumberFormatter","num","style","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","currency","_c","currencyAsSymbol","Currency","currencyDisplay","DATE_FORMATS_SPLIT","PATTERN_ALIASES","yMMMdjms","datePartGetterFactory","combine","digitCondition","nameCondition","yMdjm","yMMMMEEEEd","yMMMMd","yMMMd","jms","jm","DATE_FORMATS","yyyy","yy","MMMM","MMM","MM","M","LLLL","L","dd","d","HH","digitModifier","hourExtractor","hour12Modify","H","hh","h","jj","ss","s","sss","EEEE","EEE","EE","z","timeZoneGetter","ww","w","hour","hour12","timeZoneName","timezone","date","DateFormatter","pattern","format","cacheKey","parts","DATE_FORMATTER_CACHE","match","exec","_format","pipe","digits","isNumeric","minInt","minFraction","maxFraction","_NUMBER_FORMAT_REGEXP","parseIntAutoRadix","DecimalPipe","formatNumber","_locale","PercentPipe","CurrencyPipe","currencyCode","symbolDisplay","text","DatePipe","trim","isDate","m","ISO8601_DATE_REGEX","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","toInt","isoStringToDate","_ALIASES","medium","short","fullDate","longDate","mediumDate","shortDate","mediumTime","I18nPluralPipe","pluralMap","_localization","_INTERPOLATION_REGEXP","I18nSelectPipe","mapping","SlicePipe","COMMON_PIPES","JsonPipe","CommonModule","NgModule","declarations","SocialLoginModule","ngModule","provide","useValue","imports","BaseLoginProvider","src","onload","getElementById","signInJS","head","clientId","GoogleLoginProvider","loadScript","PROVIDER_ID","gapi","load","auth2","init","client_id","scope","isSignedIn","SocialUser","profile","currentUser","getBasicProfile","token","getAuthResponse","access_token","backendToken","id_token","getId","getName","email","getEmail","photoUrl","getImageUrl","firstName","getGivenName","lastName","getFamilyName","authToken","idToken","FacebookLoginProvider","FB","appId","autoLogAppEvents","cookie","xfbml","version","getLoginStatus","authResponse_1","authResponse","api","first_name","last_name","accessToken","login","authResponse_2","logout"],"mappings":"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"}
